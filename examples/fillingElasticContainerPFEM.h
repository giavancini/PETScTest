double h = 0.05;

double H1 = 2.5;
double b = 1.3;
double B = 4.8714;
double H2 = 3.75;
double R = 2.25;
double s = 0.2;
double l = sqrt(((B-b)/2)*((B-b)/2) + H1*H1);
double pi = 3.14;

Geometry *fluid_geo = new Geometry(0);
Point *p0 = fluid_geo->addPoint({-b/2.0   , H2+R });
Point *p1 = fluid_geo->addPoint({b/2.0   , H2+R });
Point *p2 = fluid_geo->addPoint({B/2.0   , H2+R+H1 });
Point *p3 = fluid_geo->addPoint({-B/2.0   , H2+R+H1 });
Point *p4 = fluid_geo->addPoint({-B/2.0   , H2+R });
Point *p5 = fluid_geo->addPoint({-B/2.0   , R });
Point *p6 = fluid_geo->addPoint({0.0   , R }, 1.0, false);
Point *p7 = fluid_geo->addPoint({B/2.0   , R });
Point *p8 = fluid_geo->addPoint({B/2.0   , H2+R });
Point *p9 = fluid_geo->addPoint({B/2.0-s   , H2+R });
Point *p10 = fluid_geo->addPoint({B/2.0-s   , R });
Point *p11 = fluid_geo->addPoint({-B/2.0+s   , R });
Point *p12 = fluid_geo->addPoint({-B/2.0+s   , H2+R });
Line *l0 = fluid_geo->addLine({p0, p1});
Line *l1 = fluid_geo->addLine({p1, p2});
Line *l2 = fluid_geo->addLine({p2, p3});
Line *l3 = fluid_geo->addLine({p3, p0});
Line *l4 = fluid_geo->addLine({p4, p5});
Line *l5 = fluid_geo->addCircle({p5, p6, p7});
Line *l6 = fluid_geo->addLine({p7, p8});
Line *l7 = fluid_geo->addLine({p8, p9});
Line *l8 = fluid_geo->addLine({p9, p10});
Line *l9 = fluid_geo->addCircle({p11, p6, p10});
Line *l10 = fluid_geo->addLine({p11, p12});
Line *l11 = fluid_geo->addLine({p12, p4});
Surface *s0 = fluid_geo->addPlaneSurface({l0, l1, l2, l3});
fluid_geo->transfiniteLine({l0}, b / h + 1);
fluid_geo->transfiniteLine({l1}, l / h + 1);
fluid_geo->transfiniteLine({l2}, B / h + 1);
fluid_geo->transfiniteLine({l3}, l / h + 1);
fluid_geo->transfiniteLine({l4}, H2 / h + 1);
fluid_geo->transfiniteLine({l5}, pi*R / h + 1);
fluid_geo->transfiniteLine({l6}, H2 / h + 1);
fluid_geo->transfiniteLine({l7}, s / h + 1);
fluid_geo->transfiniteLine({l8}, H2 / h + 1);
fluid_geo->transfiniteLine({l9}, pi*(R-s) / h + 1);
fluid_geo->transfiniteLine({l10}, H2 / h + 1);
fluid_geo->transfiniteLine({l11}, s / h + 1);
fluid_geo->addDirichletBoundaryCondition({l1}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l3}, ALL, 0.0);
fluid_geo->addInterfaceBoundaryCondition({l4});
fluid_geo->addInterfaceBoundaryCondition({l5});
fluid_geo->addInterfaceBoundaryCondition({l6});
fluid_geo->addInterfaceBoundaryCondition({l7});
fluid_geo->addInterfaceBoundaryCondition({l8});
fluid_geo->addInterfaceBoundaryCondition({l9});
fluid_geo->addInterfaceBoundaryCondition({l10});
fluid_geo->addInterfaceBoundaryCondition({l11});
Material *fluid_mat = new NewtonianFluid(50, 1000.0);
FluidDomain *fluid_problem = new FluidDomain(fluid_geo);
fluid_problem->applyMaterial({s0}, fluid_mat);
fluid_problem->generateMesh(T3, FRONT, "teste", "", true, false);
fluid_problem->setGravity(0.0, -9.81, 0.0);
fluid_problem->setMeshLength(h);

//Solid problem
Geometry *solid_geo = new Geometry(1);
Point *p13 = solid_geo->addPoint({-B/2.0   , H2+R });
Point *p14 = solid_geo->addPoint({-B/2.0   , R });
Point *p15 = solid_geo->addPoint({0.0   , R }, 1.0, false);
Point *p16 = solid_geo->addPoint({B/2.0   , R });
Point *p17 = solid_geo->addPoint({B/2.0   , H2+R });
Point *p18 = solid_geo->addPoint({B/2.0-s   , H2+R });
Point *p19 = solid_geo->addPoint({B/2.0-s   , R });
Point *p20 = solid_geo->addPoint({-B/2.0+s   , R });
Point *p21 = solid_geo->addPoint({-B/2.0+s   , H2+R });
Line *l12 = solid_geo->addLine({p13, p14});
Line *l13 = solid_geo->addCircle({p14, p15, p16});
Line *l14 = solid_geo->addLine({p16, p17});
Line *l15 = solid_geo->addLine({p17, p18});
Line *l16 = solid_geo->addLine({p18, p19});
Line *l17 = solid_geo->addCircle({p20, p15, p19});
Line *l18 = solid_geo->addLine({p20, p21});
Line *l19 = solid_geo->addLine({p21, p13});
Surface *s1 = solid_geo->addPlaneSurface({l12, l13, l14, l15, l16, -(*l17), l18, l19});
solid_geo->transfiniteLine({l12}, H2 / h + 1);
solid_geo->transfiniteLine({l13}, pi*R / h + 1);
solid_geo->transfiniteLine({l14}, H2 / h + 1);
solid_geo->transfiniteLine({l15}, s / h + 1);
solid_geo->transfiniteLine({l16}, H2 / h + 1);
solid_geo->transfiniteLine({l17}, pi*(R-s) / h + 1);
solid_geo->transfiniteLine({l18}, H2 / h + 1);
solid_geo->transfiniteLine({l19}, s / h + 1);
solid_geo->addInterfaceBoundaryCondition({l12});
solid_geo->addInterfaceBoundaryCondition({l13});
solid_geo->addInterfaceBoundaryCondition({l14});
solid_geo->addInterfaceBoundaryCondition({l15});
solid_geo->addInterfaceBoundaryCondition({l16});
solid_geo->addInterfaceBoundaryCondition({l17});
solid_geo->addInterfaceBoundaryCondition({l18});
solid_geo->addInterfaceBoundaryCondition({l19});
solid_geo->addDirichletBoundaryCondition({l15}, ALL, 0.0);
solid_geo->addDirichletBoundaryCondition({l19}, ALL, 0.0);
Material *solid_mat = new ElasticSolid(2.1e7, 0.3, 20.0);
SolidDomain *solid_problem = new SolidDomain(solid_geo);
solid_problem->applyMaterial({s1}, solid_mat);
solid_problem->generateMesh(T3, FRONT, "teste", "", true, false);
solid_problem->setGravity(0.0, 0.0, 0.0);

//Coupled problem
CoupledDomain *coupled_problem = new CoupledDomain(fluid_problem, solid_problem);
coupled_problem->setNumberOfSteps(10000);
coupled_problem->setDeltat(0.001);
coupled_problem->setMaxNonlinearIterations(6);
coupled_problem->setNonlinearTolerance(1.0e-6);
coupled_problem->setSpectralRadius(0.8);
coupled_problem->solveMonolithicCoupledPFEMProblem();