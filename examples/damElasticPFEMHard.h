//Fluid problem

double h = 2.0e-3;
double L = 0.2;
double H1 = 0.4;
double H = 0.09;
double D = 0.004;

Geometry *fluid_geo = new Geometry(0);
Point *p0  = fluid_geo->addPoint({0.0     , 0.0   , 0.0});
Point *p1  = fluid_geo->addPoint({L       , 0.0   , 0,0});
Point *p2  = fluid_geo->addPoint({L       , H1 , 0.0});
Point *p3  = fluid_geo->addPoint({0.0     , H1 , 0.0});
Point *p4  = fluid_geo->addPoint({0.0     , 2.0*H1 , 0.0});
Point *p5  = fluid_geo->addPoint({3.0*L   , 0.0   , 0.0});
Point *p6  = fluid_geo->addPoint({3.0*L   , H     , 0.0});
Point *p7  = fluid_geo->addPoint({3.0*L+D , H     , 0.0});
Point *p8  = fluid_geo->addPoint({3.0*L+D , 0.0   , 0.0});
Point *p9  = fluid_geo->addPoint({4.0*L+D , 0.0   , 0.0});
Point *p10 = fluid_geo->addPoint({4.0*L+D , 2.0*H1 , 0.0});
Line *l0 = fluid_geo->addLine({p0, p1});
Line *l1 = fluid_geo->addLine({p1, p2});
Line *l2 = fluid_geo->addLine({p2, p3});
Line *l3 = fluid_geo->addLine({p3, p0});
Line *l4 = fluid_geo->addLine({p3, p4});
Line *l5 = fluid_geo->addLine({p1, p5});
Line *l6 = fluid_geo->addLine({p5, p6});
Line *l7 = fluid_geo->addLine({p6, p7});
Line *l8 = fluid_geo->addLine({p7, p8});
Line *l9 = fluid_geo->addLine({p8, p9});
Line *l10 = fluid_geo->addLine({p9, p10});
Line *l11 = fluid_geo->addLine({p4, p10});
Surface *s0 = fluid_geo->addPlaneSurface({l0, l1, l2, l3});
fluid_geo->transfiniteLine({l0}, L / h + 1);
fluid_geo->transfiniteLine({l1}, H1 / h + 1);
fluid_geo->transfiniteLine({l2}, L / h + 1);
fluid_geo->transfiniteLine({l3}, H1 / h + 1);
fluid_geo->transfiniteLine({l4}, H1 / h + 1);
fluid_geo->transfiniteLine({l5}, 2*L / h + 1);
fluid_geo->transfiniteLine({l6}, H / h + 1);
fluid_geo->transfiniteLine({l7}, D / h + 1);
fluid_geo->transfiniteLine({l8}, H / h + 1);
fluid_geo->transfiniteLine({l9}, H1 / h + 1);
fluid_geo->transfiniteLine({l10}, 2*H1 / h + 1);
fluid_geo->transfiniteLine({l11}, (4*L+D) / h + 1);
fluid_geo->addDirichletBoundaryCondition({l0}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l3}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l4}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l5}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l9}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l10}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l11}, ALL, 0.0);
fluid_geo->addInterfaceBoundaryCondition({l6});
fluid_geo->addInterfaceBoundaryCondition({l7});
fluid_geo->addInterfaceBoundaryCondition({l8});
Material *fluid_mat = new NewtonianFluid(0.00089, 997.0);
FluidDomain *fluid_problem = new FluidDomain(fluid_geo);
fluid_problem->applyMaterial({s0}, fluid_mat);
fluid_problem->generateMesh(T3, FRONT, "teste", "", true, false);
fluid_problem->setGravity(0.0, -9.81, 0.0);
fluid_problem->setMeshLength(h);

//Solid problem
Geometry *solid_geo = new Geometry(1);
Point *p11  = solid_geo->addPoint({3.0*L   , 0.0   , 0.0});
Point *p12  = solid_geo->addPoint({3.0*L   , H     , 0.0});
Point *p13  = solid_geo->addPoint({3.0*L+D , H     , 0.0});
Point *p14  = solid_geo->addPoint({3.0*L+D , 0.0   , 0.0});
Line *l12 =  solid_geo->addLine({p11, p14});
Line *l13 =  solid_geo->addLine({p14, p13});
Line *l14 =  solid_geo->addLine({p13, p12});
Line *l15 =  solid_geo->addLine({p12, p11});
Surface *s1 = solid_geo->addPlaneSurface({l12, l13, l14, l15});
solid_geo->transfiniteLine({l12}, D / h + 1);
solid_geo->transfiniteLine({l13}, H / h + 1);
solid_geo->transfiniteLine({l14}, D / h + 1);
solid_geo->transfiniteLine({l15}, H / h + 1);
solid_geo->transfiniteSurface({s1}, "Left", {p11, p14, p13, p12});
solid_geo->addDirichletBoundaryCondition({l12}, ALL, 0.0);
solid_geo->addInterfaceBoundaryCondition({l13});
solid_geo->addInterfaceBoundaryCondition({l14});
solid_geo->addInterfaceBoundaryCondition({l15});
Material *solid_mat = new ElasticSolid(3.5e6, 0.495, 1161.54);
SolidDomain *solid_problem = new SolidDomain(solid_geo);
solid_problem->applyMaterial({s1}, solid_mat);
solid_problem->generateMesh(T3, FRONT, "", "", true, false);
solid_problem->setGravity(0.0, -9.81, 0.0);

//Coupled problem
CoupledDomain *coupled_problem = new CoupledDomain(fluid_problem, solid_problem);
coupled_problem->setNumberOfSteps(10000);
coupled_problem->setDeltat(0.0001);
coupled_problem->setMaxNonlinearIterations(6);
coupled_problem->setNonlinearTolerance(1.0e-4);
coupled_problem->setSpectralRadius(0.8);
coupled_problem->setExportFrequency(10);
coupled_problem->solveMonolithicCoupledPFEMProblem();