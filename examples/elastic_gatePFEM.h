//Fluid problem

double h = 1.0e-3;

Geometry *fluid_geo = new Geometry(0);
Point *p0  = fluid_geo->addPoint({0.1   , 0.0       , 0.0});
Point *p1  = fluid_geo->addPoint({0.2   , 0.0       , 0.0});
Point *p2  = fluid_geo->addPoint({0.2   , 0.140     , 0.0});
Point *p3  = fluid_geo->addPoint({0.1   , 0.140     , 0.0});
Point *p4  = fluid_geo->addPoint({0.1   , 0.07925   , 0.0});
Point *p5  = fluid_geo->addPoint({0.1   , 0.00025   , 0.0});
Point *p6  = fluid_geo->addPoint({0.2   , 0.2       , 0.0});
Point *p7  = fluid_geo->addPoint({0.1   , 0.2       , 0.0});
Point *p8  = fluid_geo->addPoint({0.0   , 0.0       , 0.0});
Point *p9  = fluid_geo->addPoint({0.095 , 0.00025   , 0.0});
Point *p10 = fluid_geo->addPoint({0.095 , 0.07925   , 0.0});
Line *l0  = fluid_geo->addLine({p0, p1});
Line *l1  = fluid_geo->addLine({p1, p2});
Line *l2  = fluid_geo->addLine({p2, p3});
Line *l3  = fluid_geo->addLine({p3, p4});
Line *l4  = fluid_geo->addLine({p4, p5});
Line *l5  = fluid_geo->addLine({p5, p0});
Line *l6  = fluid_geo->addLine({p2, p6});
Line *l7  = fluid_geo->addLine({p3, p7});
Line *l8  = fluid_geo->addLine({p8, p0});
Line *l9  = fluid_geo->addLine({p5, p9});
Line *l10 = fluid_geo->addLine({p9, p10});
Surface *s0 = fluid_geo->addPlaneSurface({l0, l1, l2, l3, l4, l5});
fluid_geo->transfiniteLine({l0}, 0.1 / h + 1);
fluid_geo->transfiniteLine({l1}, 0.14 / h + 1);
fluid_geo->transfiniteLine({l2}, 0.1 / h + 1);
fluid_geo->transfiniteLine({l3}, 0.06075 / h + 1);
fluid_geo->transfiniteLine({l4}, 0.079 / h + 1);
fluid_geo->transfiniteLine({l5}, 0.00025 / h + 1);
fluid_geo->transfiniteLine({l6}, 0.06 / h + 1);
fluid_geo->transfiniteLine({l7}, 0.06 / h + 1);
fluid_geo->transfiniteLine({l8}, 0.1 / h + 1);
fluid_geo->transfiniteLine({l9}, 0.005 / h + 1);
fluid_geo->transfiniteLine({l10}, 0.079 / h + 1);
fluid_geo->addDirichletBoundaryCondition({l0}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l1}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l3}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l6}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l7}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({l8}, ALL, 0.0);
fluid_geo->addInterfaceBoundaryCondition({l4});
fluid_geo->addInterfaceBoundaryCondition({l9});
fluid_geo->addInterfaceBoundaryCondition({l10});
Material *fluid_mat = new NewtonianFluid(0.001, 1000.0);
FluidDomain *fluid_problem = new FluidDomain(fluid_geo);
fluid_problem->applyMaterial({s0}, fluid_mat);
fluid_problem->generateMesh(T3, FRONT, "teste", "", true, false);
fluid_problem->setGravity(0.0, -9.81, 0.0);
fluid_problem->setMeshLength(h);

//Solid problem
Geometry *solid_geo = new Geometry(1);
Point *p11 =  solid_geo->addPoint({0.095   , 0.00025  , 0.0});
Point *p12 =  solid_geo->addPoint({0.1 , 0.00025  , 0.0});
Point *p13 =  solid_geo->addPoint({0.1 , 0.07925  , 0.0});
Point *p14 =  solid_geo->addPoint({0.095   , 0.07925  , 0.0});
Line *l11 =  solid_geo->addLine({p11, p12});
Line *l12 =  solid_geo->addLine({p12, p13});
Line *l13 =  solid_geo->addLine({p13, p14});
Line *l14 =  solid_geo->addLine({p14, p11});
Surface *s1 = solid_geo->addPlaneSurface({l11, l12, l13, l14});
solid_geo->transfiniteLine({l11}, 0.005 / h + 1);
solid_geo->transfiniteLine({l12}, 0.079 / h + 1);
solid_geo->transfiniteLine({l13}, 0.005 / h + 1);
solid_geo->transfiniteLine({l14}, 0.079 / h + 1);
solid_geo->transfiniteSurface({s1}, "Right", {p11, p12, p13, p14});
solid_geo->addDirichletBoundaryCondition({l13}, ALL, 0.0);
solid_geo->addInterfaceBoundaryCondition({l11});
solid_geo->addInterfaceBoundaryCondition({l12});
solid_geo->addInterfaceBoundaryCondition({l14});
Material *solid_mat = new ElasticSolid(10.0e6, 0.40, 1100.0);
SolidDomain *solid_problem = new SolidDomain(solid_geo);
solid_problem->applyMaterial({s1}, solid_mat);
solid_problem->generateMesh(T3, FRONT, "teste", "", true, false);
solid_problem->setGravity(0.0, 0.0, 0.0);

//Coupled problem
CoupledDomain *coupled_problem = new CoupledDomain(fluid_problem, solid_problem);
coupled_problem->setNumberOfSteps(800);
coupled_problem->setDeltat(0.0005);
coupled_problem->setMaxNonlinearIterations(6);
coupled_problem->setNonlinearTolerance(1.0e-4);
coupled_problem->setSpectralRadius(0.4);
coupled_problem->solveMonolithicCoupledPFEMProblem();