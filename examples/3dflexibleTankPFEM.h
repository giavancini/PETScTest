double h = 2.0e-3;

double L = 0.1;
double H = 0.08;
double w = 0.012;
double t = 0.1;

//Fluid problem
Geometry *fluid_geo = new Geometry(0);
Point *p0   = fluid_geo->addPoint({0.0   , 0.0  ,  0.0    , h});
Point *p1   = fluid_geo->addPoint({L     , 0.0  ,  0.0    , h});
Point *p2   = fluid_geo->addPoint({L     , H    ,  0.0    , h});
Point *p3   = fluid_geo->addPoint({0.0   , H    ,  0.0    , h});
Point *p4   = fluid_geo->addPoint({1.5*L , 0.0  ,  0.0    , h});
Point *p5   = fluid_geo->addPoint({1.5*L , L    ,  0.0    , h});
Point *p6   = fluid_geo->addPoint({0.0   , L    ,  0.0    , h});
Point *p7   = fluid_geo->addPoint({0.0   , 0.0  ,  -t     , h});
Point *p8   = fluid_geo->addPoint({L     , 0.0  ,  -t     , h});
Point *p9   = fluid_geo->addPoint({L     , H    ,  -t     , h});
Point *p10  = fluid_geo->addPoint({0.0   , H    ,  -t     , h});
Point *p11  = fluid_geo->addPoint({1.5*L , 0.0  ,  -t     , h});
Point *p12  = fluid_geo->addPoint({1.5*L , L    ,  -t     , h});
Point *p13  = fluid_geo->addPoint({0.0   , L    ,  -t     , h});
Point *p14  = fluid_geo->addPoint({L     , 0    ,  -0.01*t, h});
Point *p15  = fluid_geo->addPoint({L     , 0    ,  -0.99*t, h});
Point *p16  = fluid_geo->addPoint({L     , H    ,  -0.99*t, h});
Point *p17  = fluid_geo->addPoint({L     , H    ,  -0.01*t, h});
Point *p18  = fluid_geo->addPoint({L     , L    ,  -0.99*t, h});
Point *p19  = fluid_geo->addPoint({L     , L    ,  -0.01*t, h});

Line *l0  = fluid_geo->addLine({p0, p1});
Line *l1  = fluid_geo->addLine({p1, p2});
Line *l2  = fluid_geo->addLine({p2, p3});
Line *l3  = fluid_geo->addLine({p3, p0});
Line *l4  = fluid_geo->addLine({p1, p4});
Line *l5  = fluid_geo->addLine({p4, p5});
Line *l6  = fluid_geo->addLine({p5, p6});
Line *l7  = fluid_geo->addLine({p6,  p3});
Line *l8  = fluid_geo->addLine({p8,  p7});
Line *l9  = fluid_geo->addLine({p7,  p10});
Line *l10 = fluid_geo->addLine({p10,  p9});
Line *l11 = fluid_geo->addLine({p9,  p8});
Line *l12 = fluid_geo->addLine({p10,  p13});
Line *l13 = fluid_geo->addLine({p13, p12});
Line *l14 = fluid_geo->addLine({p12,  p11});
Line *l15 = fluid_geo->addLine({p11,  p8});
Line *l16 = fluid_geo->addLine({p0,  p7});
Line *l17 = fluid_geo->addLine({p3,  p10});
Line *l18 = fluid_geo->addLine({p6,  p13});
Line *l19 = fluid_geo->addLine({p1,  p14});
Line *l20 = fluid_geo->addLine({p14,  p17});
Line *l21 = fluid_geo->addLine({p17,  p2});
Line *l22 = fluid_geo->addLine({p14,  p15});
Line *l23 = fluid_geo->addLine({p15,  p16});
Line *l24 = fluid_geo->addLine({p16,  p17});
Line *l25 = fluid_geo->addLine({p16,  p18});
Line *l26 = fluid_geo->addLine({p18,  p19});
Line *l27 = fluid_geo->addLine({p19,  p17});
Line *l28 = fluid_geo->addLine({p15,  p8});
Line *l29 = fluid_geo->addLine({p9,  p16});
Surface *s0 = fluid_geo->addPlaneSurface({l0, l1, l2, l3});
Surface *s1 = fluid_geo->addPlaneSurface({l4, l5, l6, l7, -(*l2), -(*l1)});
Surface *s2 = fluid_geo->addPlaneSurface({l8, l9, l10, l11});
Surface *s3 = fluid_geo->addPlaneSurface({l15, -(*l11), -(*l10), l12, l13, l14});
Surface *s4 = fluid_geo->addPlaneSurface({-(*l16), -(*l3), l17, -(*l9)});
Surface *s5 = fluid_geo->addPlaneSurface({-(*l17), -(*l7), l18, -(*l12)});
Surface *s6 = fluid_geo->addPlaneSurface({l19, l20, l21, -(*l1)});
Surface *s7 = fluid_geo->addPlaneSurface({l22, l23, l24, -(*l20)});
Surface *s8 = fluid_geo->addPlaneSurface({-(*l24), l25, l26, l27});
Surface *s9 = fluid_geo->addPlaneSurface({l28, -(*l11), l29, -(*l23)});
Surface *s10 = fluid_geo->addPlaneSurface({-(*l22), -(*l19), -(*l0), l16, -(*l8), -(*l28)});
Surface *s11 = fluid_geo->addPlaneSurface({-(*l21), -(*l24), -(*l29), -(*l10), -(*l17), -(*l2)});
Volume *v0 = fluid_geo->addVolume({s0, s2, s4, s6, s7, s9, s10, s11});
fluid_geo->transfiniteLine({l0}, L / h + 1);
fluid_geo->transfiniteLine({l1}, H / h + 1);
fluid_geo->transfiniteLine({l2}, L / h + 1);
fluid_geo->transfiniteLine({l3}, H / h + 1);
fluid_geo->transfiniteLine({l4}, 0.5*L / h + 1);
fluid_geo->transfiniteLine({l5}, L / h + 1);
fluid_geo->transfiniteLine({l6}, 1.5*L / h + 1);
fluid_geo->transfiniteLine({l7}, (L-H) / h + 1);
fluid_geo->transfiniteLine({l8}, L / h + 1);
fluid_geo->transfiniteLine({l9}, H / h + 1);
fluid_geo->transfiniteLine({l10}, L / h + 1);
fluid_geo->transfiniteLine({l11}, H / h + 1);
fluid_geo->transfiniteLine({l12}, (L-H) / h + 1);
fluid_geo->transfiniteLine({l13}, 1.5*L / h + 1);
fluid_geo->transfiniteLine({l14}, L / h + 1);
fluid_geo->transfiniteLine({l15}, 0.5*L / h + 1);
fluid_geo->transfiniteLine({l16}, t / h + 1);
fluid_geo->transfiniteLine({l17}, t / h + 1);
fluid_geo->transfiniteLine({l18}, t / h + 1);
fluid_geo->transfiniteLine({l19}, 2);
fluid_geo->transfiniteLine({l20}, H / h + 1);
fluid_geo->transfiniteLine({l21}, 2);
fluid_geo->transfiniteLine({l22}, t / h + 1);
fluid_geo->transfiniteLine({l23}, H / h + 1);
fluid_geo->transfiniteLine({l24}, t / h + 1);
fluid_geo->transfiniteLine({l25}, (L-H) / h + 1);
fluid_geo->transfiniteLine({l26}, t / h + 1);
fluid_geo->transfiniteLine({l27}, (L-H) / h + 1);
fluid_geo->transfiniteLine({l28}, 2);
fluid_geo->transfiniteLine({l29}, 2);
fluid_geo->transfiniteSurface({s7}, "Alternate");
fluid_geo->transfiniteSurface({s8}, "Alternate");
fluid_geo->addDirichletBoundaryCondition({s0}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s1}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s2}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s3}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s4}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s5}, ALL, 0.0);
fluid_geo->addDirichletBoundaryCondition({s10}, ALL, 0.0);
fluid_geo->addInterfaceBoundaryCondition({s7});
fluid_geo->addInterfaceBoundaryCondition({s8});
Material *fluid_mat = new NewtonianFluid(0.1, 1000.0);
FluidDomain *fluid_problem = new FluidDomain(fluid_geo);
fluid_problem->applyMaterial({v0}, fluid_mat);
fluid_problem->generateMesh(TET4, FRONT, "fluid", "", true, false);
fluid_problem->setGravity(0.0, -9.81, 0.0);
fluid_problem->setAlpha(1.35);
fluid_problem->setMeshLength(h);

//Solid problem
Geometry *solid_geo = new Geometry(1);
Point *p20 = solid_geo->addPoint({L   , 0.0  ,  -0.01*t, h});
Point *p21 = solid_geo->addPoint({L+w , 0.0  ,  -0.01*t, h});
Point *p22 = solid_geo->addPoint({L+w , L    ,  -0.01*t, h});
Point *p23 = solid_geo->addPoint({L   , L    ,  -0.01*t, h});
Point *p24 = solid_geo->addPoint({L   , H    ,  -0.01*t, h});
Point *p25 = solid_geo->addPoint({L   , 0.0  ,  -0.99*t, h});
Point *p26 = solid_geo->addPoint({L+w , 0.0  ,  -0.99*t, h});
Point *p27 = solid_geo->addPoint({L+w , L    ,  -0.99*t, h});
Point *p28 = solid_geo->addPoint({L   , L    ,  -0.99*t, h});
Point *p29 = solid_geo->addPoint({L   , H    ,  -0.99*t, h});
Line *l30 = solid_geo->addLine({p20, p21});
Line *l31 = solid_geo->addLine({p21, p22});
Line *l32 = solid_geo->addLine({p22, p23});
Line *l33 = solid_geo->addLine({p23, p24});
Line *l34 = solid_geo->addLine({p24, p20});
Line *l35 = solid_geo->addLine({p26, p25});
Line *l36 = solid_geo->addLine({p25, p29});
Line *l37 = solid_geo->addLine({p29, p28});
Line *l38 = solid_geo->addLine({p28, p27});
Line *l39 = solid_geo->addLine({p27, p26});
Line *l40 = solid_geo->addLine({p20, p25});
Line *l41 = solid_geo->addLine({p21, p26});
Line *l42 = solid_geo->addLine({p22, p27});
Line *l43 = solid_geo->addLine({p23, p28});
Line *l44 = solid_geo->addLine({p24, p29});
Surface *s12 = solid_geo->addPlaneSurface({l30, l31, l32, l33, l34});
Surface *s13 = solid_geo->addPlaneSurface({l35, l36, l37, l38, l39});
Surface *s14 = solid_geo->addPlaneSurface({l40, l36, -(*l44), l34});
Surface *s15 = solid_geo->addPlaneSurface({l44, l37, -(*l43), l33});
Surface *s16 = solid_geo->addPlaneSurface({l41, -(*l39), -(*l42), -(*l31)});
Surface *s17 = solid_geo->addPlaneSurface({-(*l30), l40, -(*l35), -(*l41)});
Surface *s18 = solid_geo->addPlaneSurface({-(*l32), l42, -(*l38), -(*l43)});
Volume *v1 = solid_geo->addVolume({s12, s13, s14, s15, s16, s17, s18});
solid_geo->transfiniteLine({l30}, w / h + 1);
solid_geo->transfiniteLine({l31}, L / h + 1);
solid_geo->transfiniteLine({l32}, w / h + 1);
solid_geo->transfiniteLine({l33}, (L-H) / h + 1);
solid_geo->transfiniteLine({l34}, H / h + 1);
solid_geo->transfiniteLine({l35}, w / h + 1);
solid_geo->transfiniteLine({l36}, H / h + 1);
solid_geo->transfiniteLine({l37}, (L-H) / h + 1);
solid_geo->transfiniteLine({l38}, w / h + 1);
solid_geo->transfiniteLine({l39}, L / h + 1);
solid_geo->transfiniteLine({l40}, t / h + 1);
solid_geo->transfiniteLine({l41}, t / h + 1);
solid_geo->transfiniteLine({l42}, t / h + 1);
solid_geo->transfiniteLine({l43}, t / h + 1);
solid_geo->transfiniteLine({l44}, t / h + 1);
solid_geo->transfiniteSurface({s14}, "Alternate");
solid_geo->transfiniteSurface({s15}, "Alternate");
solid_geo->transfiniteSurface({s12}, "Left", {p20, p21, p22, p23});
solid_geo->transfiniteSurface({s13}, "Left", {p25, p26, p27, p28});
solid_geo->transfiniteSurface({s16}, "Alternate");
solid_geo->transfiniteSurface({s17}, "Left");
solid_geo->transfiniteSurface({s18}, "Left");
// solid_geo->transfiniteVolume({v1});
solid_geo->addDirichletBoundaryCondition({s17}, ALL, 0.0);
// solid_geo->addDirichletBoundaryCondition({s14}, ALL, 0.0);
// solid_geo->addDirichletBoundaryCondition({s15}, ALL, 0.0);
solid_geo->addInterfaceBoundaryCondition({s14});
solid_geo->addInterfaceBoundaryCondition({s15});
Material *solid_mat = new ElasticSolid(1.0e6, 0.0, 2500.0);
SolidDomain *solid_problem = new SolidDomain(solid_geo);
solid_problem->applyMaterial({v1}, solid_mat);
solid_problem->generateMesh(TET4, FRONT, "solid", "", true, true);
solid_problem->setGravity(0.0, 0.0, 0.0);

//Coupled problem
CoupledDomain *coupled_problem = new CoupledDomain(fluid_problem, solid_problem);
coupled_problem->setNumberOfSteps(1000);
coupled_problem->setDeltat(0.001);
coupled_problem->setMaxNonlinearIterations(6);
coupled_problem->setNonlinearTolerance(1.0e-4);
coupled_problem->setSpectralRadius(0.5);
//coupled_problem->setExportFrequency(1);
coupled_problem->solveMonolithicCoupledPFEMProblem();